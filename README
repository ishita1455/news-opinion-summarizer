````markdown
# 📰 News Opinion & Editorial Summarizer

## 📌 Overview
This project implements a **fully automated pipeline** to process English newspaper PDFs. It:

1. Identifies pages containing **Opinion / Editorial / Views** sections.  
2. Extracts only those pages.  
3. Merges them into a **single consolidated PDF**.  
4. Generates **summaries** of the extracted content using Groq LLM.  
5. Runs seamlessly on **Windows and Linux** with minimal human intervention.  

---

## ✨ Features
- ✅ Automated extraction of editorial/opinion pages.  
- ✅ **OCR fallback** for scanned PDFs using Tesseract.  
- ✅ **Header-based detection**: detects “Editorial”, “Opinion”, “Views”, “Letters”.  
- ✅ **Merged PDF output**: all relevant pages in one file.  
- ✅ **Summarization with Groq API** for concise insights.  
- ✅ Works cross-platform (Windows/Linux).  
- ✅ Detailed **logging** of processed files and extracted pages.  

---

## ⚙️ Setup

### Prerequisites
- Python 3.10+  
- [Poppler](https://github.com/oschwartz10612/poppler-windows) (for `pdf2image`)  
- [Tesseract OCR](https://github.com/tesseract-ocr/tesseract)  

### Installation
```bash
git clone https://github.com/ishita1455/news-opinion-summarizer.git
cd news-opinion-summarizer
python -m venv .venv
source .venv/bin/activate   # Linux / macOS
.venv\Scripts\activate      # Windows

pip install -r requirements.txt
````

### Set Groq API Key

```bash
# Linux / macOS
export GROQ_API_KEY="your_api_key_here"

# Windows PowerShell
$env:GROQ_API_KEY="your_api_key_here"
```

---

## 🚀 Usage

1. Place input newspaper PDFs in the **`input_pdfs/`** folder.
2. Run the pipeline:

   ```bash
   python summarizer.py
   ```
3. Outputs will be saved in the **`final/`** folder:

   * `opinion_editorials.pdf` → merged editorial pages
   * `summaries.txt` → plain text summaries
   * `summaries.md` → markdown summaries

---

## 📂 Project Structure

```
news-opinion-summarizer/
│── input_pdfs/              # Place input newspapers here
│── output/                  # Temporary files
│── final/                   # Final merged PDF + summaries
│── summarizer.py            # Main pipeline script
│── requirements.txt         # Python dependencies
│── README.md                # Project documentation
```

---

## 🛠 Example Run

```bash
Processing: The Hindu HD-19.pdf
   -> Added page 10 (Editorial)
   -> Added page 11 (Opinion)
   -> Added page 21 (Sports Opinion)
Processing: Tribune_TheTribune_19-09-2025.pdf
   -> Added page 8 (Opinion)
📄 Merged PDF saved at: final/opinion_editorials.pdf
📝 Summaries saved at: final/summaries.txt
📘 Markdown summaries saved at: final/summaries.md
```

---

## 🎯 Key Highlights

* End-to-end automation of extraction + summarization.
* Handles **both text-based and scanned PDFs**.
* Produces **clean, professional outputs** for quick review.



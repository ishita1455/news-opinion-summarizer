📰 Newspaper Opinion/Editorial Extraction & Summarization Pipeline
📌 Overview

This project implements a fully automated pipeline to process multiple English newspapers in PDF format. It:

Identifies pages containing Opinion / Editorial sections.

Extracts only those pages.

Merges extracted pages into a single consolidated PDF.

Generates summaries of the extracted content using an LLM (Groq).

Runs seamlessly on Windows and Linux with minimal human intervention.

This pipeline is designed for efficiency, automation, and professional reporting of editorial content.

✨ Features

Automated page extraction: Uses PyPDF2 to extract relevant pages.

OCR fallback: Handles scanned PDFs using Tesseract via pytesseract.

Keyword & header-based detection: Finds Opinion, Editorial, Views, and related sections.

Merged PDF output: Consolidates all relevant opinion/editorial pages into one file.

LLM summarization: Generates concise summaries with Groq API.

Cross-platform compatibility: Tested on Windows & Linux.

Robust logging: Tracks processed files, extracted pages, and errors.

⚙️ Setup
Prerequisites

Python 3.10+

Poppler
 (for pdf2image)

Tesseract OCR

Installation
git clone https://github.com/ishita1455/news-opinion-summarizer.git
cd news-opinion-summarizer
python -m venv .venv
source .venv/bin/activate   # Linux / macOS
.venv\Scripts\activate      # Windows

pip install -r requirements.txt

Set Groq API Key
export GROQ_API_KEY="your_api_key_here"   # Linux / macOS
$env:GROQ_API_KEY="your_api_key_here"     # Windows PowerShell

🚀 Usage

Place all input newspaper PDFs inside the input_pdfs/ folder.

Run the pipeline:

python summarizer.py


Outputs:

final/opinion_editorials.pdf → merged editorial pages

final/summaries.txt → plain text summaries

final/summaries.md → markdown summaries

🛠 Example Workflow
Processing: The Hindu HD-19.pdf  
   -> Added page 10 (Editorial)  
   -> Added page 11 (Opinion)  
📄 Merged PDF saved at: final/opinion_editorials.pdf  
📝 Summaries saved at: final/summaries.txt  
📘 Markdown summaries saved at: final/summaries.md  

📂 Project Structure
news-opinion-summarizer/
│── input_pdfs/              # Place input newspapers here
│── output/                  # Temporary files
│── final/                   # Final merged PDF + summaries
│── summarizer.py            # Main pipeline
│── requirements.txt         # Python dependencies
│── README.md                # Project documentation

🎯 Key Highlights
1. Automated end-to-end extraction and summarization.

2. Works with both text-based and scanned PDFs.

3. Provides quick insights from lengthy newspapers.
